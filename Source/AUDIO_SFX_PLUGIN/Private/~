
/********************
* HEADER DECLARATIONS
*********************/

class FMYViewport : public FViewport
{
public:
    virtual void* GetWindow() override;
    virtual void MoveWindow(int32 NewPosX, int32 NewPosY, int32 NewSizeX, int32 NewSizeY) override;
    virtual void Destroy() override;
    virtual bool SetUserFocus(bool bFocus) override;
    virtual bool KeyState(FKey Key) const override;
    virtual int32 GetMouseX() const override;
    virtual int32 GetMouseY() const override;
    virtual void GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition = true) override;
    virtual void SetMouse(int32 x, int32 y) override;
    virtual void ProcessInput(float DeltaTime) override;
    virtual FVector2D VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx) const override;
    virtual FIntPoint ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate) const override;
    virtual void InvalidateDisplay() override;
    virtual FViewportFrame* GetViewportFrame() override;
};

class FMYViewportClient : public FViewportClient
{
public:
    FMYViewportClient() {};
    ~FMYViewportClient() {};
    TSharedPtr<FMYViewport> Viewport;
};

class FCamera : public ACameraActor
{
public:
    FCamera() {};
    ~FCamera() {};
};

class FCharacter : public ACharacter
{
public:
    FCharacter() {};
    ~FCharacter() {};
};

class FPlayerController : public APlayerController
{
public:
    FPlayerController() {};
    ~FPlayerController() {};
};

/*******************
* SOURCE DEFINITIONS
********************/

void* FMYViewport::GetWindow()
{
    return nullptr;
}

void FMYViewport::MoveWindow(int32 NewPosX, int32 NewPosY, int32 NewSizeX, int32 NewSizeY)
{
}

void FMYViewport::Destroy()
{
}

bool FMYViewport::SetUserFocus(bool bFocus)
{
    return false;
}

bool FMYViewport::KeyState(FKey Key) const
{
    return false;
}

int32 FMYViewport::GetMouseX() const
{
    return int32();
}

int32 FMYViewport::GetMouseY() const
{
    return int32();
}

void FMYViewport::GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition)
{
}

void FMYViewport::SetMouse(int32 x, int32 y)
{
}

void FMYViewport::ProcessInput(float DeltaTime)
{
}

FVector2D FMYViewport::VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx) const
{
    return FVector2D();
}

FIntPoint FMYViewport::ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate) const
{
    return FIntPoint();
}

void FMYViewport::InvalidateDisplay()
{
}

FViewportFrame* FMYViewport::GetViewportFrame()
{
    return nullptr;
}



void FAUDIO_SFX_PLUGINModule::CreatCameraViewportPlayerControllerEtc()
{

    //TObjectPtr<UWorld> World = GEngine->GetWorld();

    //GEngine->GameViewport->AddViewportWidgetContent(
    //    SNew(SMy3DViewport).AddMetaData<FTagMetaData>(FTagMetaData(TEXT("MyViewport")))
    //);

    // Create a camera actor
    //FActorSpawnParameters SpawnParams;
    //SpawnParams.Name = TEXT("MyCamera");
    //TObjectPtr<FCamera> CameraActor = World->SpawnActor<FCamera>(FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);
    //CameraActor->SetActorLabel(TEXT("MyCameraActor"));

    // Create a 3D viewport
    //TObjectPtr<FMYViewportClient> ViewportClient = new FMYViewportClient();
    //TSharedPtr<FMYViewportClient> ViewportClient = GEngine->GameViewport();
    //ViewportClient->Viewport = MakeShareable(new FMYViewport(ViewportClient));
    //ViewportClient->Viewport->SetSize(FIntPoint(1024, 768));
    //ViewportClient->Viewport->SetInitialSize(FIntPoint(1024, 768));
    //ViewportClient->Viewport->SetViewLocation(FVector::ZeroVector);
    //ViewportClient->Viewport->SetViewRotation(FRotator::ZeroRotator);
    //ViewportClient->Viewport->SetViewTarget(CameraActor);

    // Create a character controller
    //TObjectPtr<FCharacter> Character = World->SpawnActor<FCharacter>(FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);

    // Set the camera actor as the current player controller's controlled camera
    //TObjectPtr<FPlayerController> PlayerController = (FPlayerController*) GEngine->GetFirstLocalPlayerController(GEngine->GetWorld());
    //PlayerController->SetViewTarget(CameraActor);

    // Create a camera actor
    //TObjectPtr<UEngine> GEngineObjPtr = NewObject<UEngine>();
    World = GEngine->GetWorld(); // GEngineObjPtr->GetWorld(); //
    Camera = World->SpawnActor<ACameraActor>(FVector::ZeroVector, FRotator::ZeroRotator);

    // Set the camera properties
    Camera->SetActorLocation(FVector::ZeroVector);
    Camera->SetActorRotation(FRotator::ZeroRotator);
    Camera->SetActorScale3D(FVector::ZeroVector);

    // Create a player controller
    PlayerController = World->SpawnActor<APlayerController>(FVector::ZeroVector, FRotator::ZeroRotator);

    // Set the player controller's properties
    PlayerController->SetControlRotation(FRotator::ZeroRotator);
    PlayerController->bShowMouseCursor = true;
    PlayerController->bEnableClickEvents = true;
    PlayerController->bEnableMouseOverEvents = true;

    // Create a render target for the viewport

    //ViewportClient = NewObject<UGameViewportClient>();
    ViewportClient = NewObject<FViewportClient>();

    // Set the viewport properties
    ViewportClient->Viewport->SetInitialSize(FIntPoint(1024, 725));

    // Create a render target for the viewport
    //Viewport = NewObject<FViewport>();

    // Set the viewport properties
    //Viewport->SetInitialSize(FIntPoint(1024, 725));
    //Viewport->SetRealtime(true); // real-time rendering
    //Viewport->bIsSlateViewport = true;
}
TSharedRef<SDockTab> FAUDIO_SFX_PLUGINModule::OnSpawnPluginTab(const FSpawnTabArgs& SpawnTabArgs)
{
    //DXRApplication THE_RTX_APP;

    FText WidgetText = FText::Format(
        LOCTEXT("WindowWidgetText", "Add code to {0} in {1} to override this window's contents"),
        FText::FromString(TEXT("FAUDIO_SFX_PLUGINModule::OnSpawnPluginTab")),
        FText::FromString(TEXT("AUDIO_SFX_PLUGIN.cpp"))
        );

    // Init viewport et al.
    CreatCameraViewportPlayerControllerEtc();

    return SNew(SDockTab)
        .TabRole(ETabRole::MajorTab)
        [
            // Put your tab content here!
            //SNew(SViewport)
            /*SNew(SBox)
            .HAlign(HAlign_Fill)
            .VAlign(VAlign_Fill)
            [
                SNew(SViewport)
            ]*/

            //SNew(SMy3DViewport)
            
            SNew(SBox)
            .HAlign(HAlign_Center)
            .VAlign(VAlign_Center)
            [
                SNew(STextBlock)
                .Text(WidgetText)
            ]
        ];
}


 /*   return SNew(SWindow)
        .Title(LOCTEXT("FAUDIO_SFX_PLUGINTabWindowTitle", "The Audio SFX Designer"))
        .ClientSize(FVector2D(1024, 728))
        .CreateTitleBar(true);*/

    return SNew(SDockTab)
        .TabRole(ETabRole::MajorTab)
        [            
           /* SNew(SBox)
            .HAlign(HAlign_Center)
            .VAlign(VAlign_Center)
            [
                SNew(STextBlock)
                .Text(WidgetText)
            ]*/
            WindowObjPtr
        ];



class UMGViewportComponent : public SWindow
{

public:

    UMGViewportComponent();
   ~UMGViewportComponent();

    void OpenAsWindow();
    void SetManualDPIScaling();
    void OverrideWindowManualDPIScaling();

};


class UMGViewportComponent : public SWindow
{

public:

    UMGViewportComponent();
   ~UMGViewportComponent();

public:
    TSharedPtr<UMGViewportComponent> toSharedPtr();

};



UMGViewportComponent::UMGViewportComponent()
{
    this->SetTitle(FText::FromString(TEXT("The Audio SFX Designer")));
    this->bCreateTitleBar = true;

    /*void* WindowHandlePtr = 0;
    uint32 SizeXINT32 = 1024;
    uint32 SizeYINT32 = 728;
    bool isFullcreenBOOL = false;
    EPixelFormat PreferredPixelFormatENUM = EPixelFormat::PF_R32G32B32A32_UINT;

    RHICreateViewport(WindowHandlePtr, SizeXINT32, SizeYINT32, isFullcreenBOOL, PreferredPixelFormatENUM);*/
}

UMGViewportComponent::~UMGViewportComponent()
{
}

TSharedPtr<UMGViewportComponent> UMGViewportComponent::toSharedPtr()
{
    return TSharedPtr<UMGViewportComponent>();
}


    return SNew(SDockTab)
        .TabRole(ETabRole::MajorTab)
        [
            /*SNew(SWindow)
            .Title(LOCTEXT("FAUDIO_SFX_PLUGINTabWindowTitle", "The Audio SFX Designer"))
            .CreateTitleBar(true)*/
            SNew(SWindow)
        ];



UMGViewportComponent::UMGViewportComponent()
{
}

UMGViewportComponent::~UMGViewportComponent()
{
}

//TSharedRef<UMGViewportComponent> UMGViewportComponent::toSharedRef()
//{
//    return TSharedRef<UMGViewportComponent>();
//}

    TSharedRef<SDockTab> MySDockTabObjPtr = SNew(SDockTab).TabRole(ETabRole::MajorTab);

    TSharedRef<SWindow> QuickWindowObjRef = TSharedRef<SWindow>();
    //TSharedRef<UMGViewportComponent> QuickWindowObjRef = MakeSharedRef<UMGViewportComponent>();
    //MySDockTabObjPtr->SetContent(QuickWindowObjRef);

    return MySDockTabObjPtr;


void FAUDIO_SFX_PLUGINModule::CreateCameraViewportPlayerControllerEtc()
{
    //WindowObjPtr = SNew(SWindow)
        //.Title(FText::FromString(TEXT("The Audio SFX Designer")))
        //.CreateTitleBar(true)
        ;
    //WindowObjPtr->SetTitle(FText::FromString(TEXT("The Audio SFX Designer")));
    //WindowObjPtr->bCreateTitleBar = true;
    //WindowObjPtr->SetContent
}


    //TSharedRef<SWindow>(QuickWindowObjRef);
    //TSharedRef<SWindow> QuickWindowObjRef = SNew(SWindow);
    //TSharedRef<UMGViewportComponent> QuickWindowObjRef = MakeSharedRef<UMGViewportComponent>();
    //MySDockTabObjPtr->SetContent(QuickWindowObjRef);

    //TSharedPtr<UMGViewportComponent> QuickWindowObjRef;
    //TSharedRef<UMGViewportComponent> QuickWindowObjRef;
    //UMGViewportComponent QuickWindowObjRef;
    //TSharedRef<SWindow> QuickWindowObjRef;
    //UMGViewportComponent ViewportClientComponent;

    //UMGViewportComponent::FArguments InArgs;
    //QuickWindowObjRef->Construct(InArgs);


//class IModuleInterface;
//class FToolBarBuilder;
//class FMenuBuilder;
//class FViewportClient;
//class UMGViewportComponent;


    SpawnTabArgs.GetTabId();

    if (SpawnTabArgs.GetTabId() == )
    {

    }


    //TSharedRef<UMGViewportComponent> SNWin = SNew(UMGViewportComponent)
        //.Title(FText::FromString(TEXT("The Audio SFX Designer")))
        //.CreateTitleBar(true)
        //.HasCloseButton(false)
        ;

    return SNew(SDockTab)
        .TabRole(ETabRole::MajorTab)
        .Label(inAttributesTXT)
        [
            SNWin
        ]
        ;


void CreateCameraViewportPlayerControllerEtc();

// Init viewport et al.
CreateCameraViewportPlayerControllerEtc();

void FAUDIO_SFX_PLUGINModule::CreateCameraViewportPlayerControllerEtc()
{

}


    //DXRApplication THE_RTX_APP;

    FText WidgetText = FText::Format(
        LOCTEXT("WindowWidgetText", "Add code to {0} in {1} to override this window's contents"),
        FText::FromString(TEXT("FAUDIO_SFX_PLUGINModule::OnSpawnPluginTab")),
        FText::FromString(TEXT("AUDIO_SFX_PLUGIN.cpp"))
        );


    UE_UINT64 iUInt64 = 0;
    for (UE_FLOAT64REF SampleIdxFloat64Ref : FileInfoObj.NoiseBufferFloat64)
    {
        /* UE_UINT64 frequencyUInt64 = 1 << iUInt64; */
        UE_UINT64 amplitude = std::pow(FileInfoObj.BlackNoisePersistenceValueFloat64, iUInt64++);
        SampleIdxFloat64Ref += dis(gen) + amplitude;
    }

class Tone : public 
    BlackNoise, 
    BlueNoise,
    GreyNoise,
    PinkNoise,
    PurpleNoise,
    WhiteNoise//,
    //WhitePerlinNoise
{

public:

    Tone();

    struct NOISE_OBJ
    {
        BlackNoise Black;
        BlueNoise Blue;
        GreyNoise Grey;
        PinkNoise Pink;
        PurpleNoise Purple;
        WhiteNoise White;
       // WhitePerlinNoise Perlin;
    } NoiseObj;

    struct RANDOMTONE_OBJ {

    } RandomToneGenerateObj;
};

/*
class Tone : public 
    BlackNoise, 
    BlueNoise,
    GreyNoise,
    PinkNoise,
    PurpleNoise,
    WhiteNoise,
    WhitePerlinNoise,
    SimplexNoise,
    FractalNoise
{

public:

    Tone();

    struct NOISE_OBJ
    {
        BlackNoise Black;
        BlueNoise Blue;
        GreyNoise Grey;
        PinkNoise Pink;
        PurpleNoise Purple;
        WhiteNoise White;
        WhitePerlinNoise PerlinWhite;
        SimplexNoise PerlinSimplex;
        FractalNoise Fractal;
    } NoiseObj;

};
*/


//Tone::Tone()
//{
//}


    {
        std::cout << "Error - AudioEqualization::CooleyTukeyFFT: invalid parameter, FileInfoObj.LengthUInt64" << std::endl;
        return;
    }