
/********************
* HEADER DECLARATIONS
*********************/

class FMYViewport : public FViewport
{
public:
    virtual void* GetWindow() override;
    virtual void MoveWindow(int32 NewPosX, int32 NewPosY, int32 NewSizeX, int32 NewSizeY) override;
    virtual void Destroy() override;
    virtual bool SetUserFocus(bool bFocus) override;
    virtual bool KeyState(FKey Key) const override;
    virtual int32 GetMouseX() const override;
    virtual int32 GetMouseY() const override;
    virtual void GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition = true) override;
    virtual void SetMouse(int32 x, int32 y) override;
    virtual void ProcessInput(float DeltaTime) override;
    virtual FVector2D VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx) const override;
    virtual FIntPoint ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate) const override;
    virtual void InvalidateDisplay() override;
    virtual FViewportFrame* GetViewportFrame() override;
};

class FMYViewportClient : public FViewportClient
{
public:
    FMYViewportClient() {};
    ~FMYViewportClient() {};
    TSharedPtr<FMYViewport> Viewport;
};

class FCamera : public ACameraActor
{
public:
    FCamera() {};
    ~FCamera() {};
};

class FCharacter : public ACharacter
{
public:
    FCharacter() {};
    ~FCharacter() {};
};

class FPlayerController : public APlayerController
{
public:
    FPlayerController() {};
    ~FPlayerController() {};
};

/*******************
* SOURCE DEFINITIONS
********************/

void* FMYViewport::GetWindow()
{
    return nullptr;
}

void FMYViewport::MoveWindow(int32 NewPosX, int32 NewPosY, int32 NewSizeX, int32 NewSizeY)
{
}

void FMYViewport::Destroy()
{
}

bool FMYViewport::SetUserFocus(bool bFocus)
{
    return false;
}

bool FMYViewport::KeyState(FKey Key) const
{
    return false;
}

int32 FMYViewport::GetMouseX() const
{
    return int32();
}

int32 FMYViewport::GetMouseY() const
{
    return int32();
}

void FMYViewport::GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition)
{
}

void FMYViewport::SetMouse(int32 x, int32 y)
{
}

void FMYViewport::ProcessInput(float DeltaTime)
{
}

FVector2D FMYViewport::VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx) const
{
    return FVector2D();
}

FIntPoint FMYViewport::ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate) const
{
    return FIntPoint();
}

void FMYViewport::InvalidateDisplay()
{
}

FViewportFrame* FMYViewport::GetViewportFrame()
{
    return nullptr;
}



void FAUDIO_SFX_PLUGINModule::CreatCameraViewportPlayerControllerEtc()
{

    //TObjectPtr<UWorld> World = GEngine->GetWorld();

    //GEngine->GameViewport->AddViewportWidgetContent(
    //    SNew(SMy3DViewport).AddMetaData<FTagMetaData>(FTagMetaData(TEXT("MyViewport")))
    //);

    // Create a camera actor
    //FActorSpawnParameters SpawnParams;
    //SpawnParams.Name = TEXT("MyCamera");
    //TObjectPtr<FCamera> CameraActor = World->SpawnActor<FCamera>(FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);
    //CameraActor->SetActorLabel(TEXT("MyCameraActor"));

    // Create a 3D viewport
    //TObjectPtr<FMYViewportClient> ViewportClient = new FMYViewportClient();
    //TSharedPtr<FMYViewportClient> ViewportClient = GEngine->GameViewport();
    //ViewportClient->Viewport = MakeShareable(new FMYViewport(ViewportClient));
    //ViewportClient->Viewport->SetSize(FIntPoint(1024, 768));
    //ViewportClient->Viewport->SetInitialSize(FIntPoint(1024, 768));
    //ViewportClient->Viewport->SetViewLocation(FVector::ZeroVector);
    //ViewportClient->Viewport->SetViewRotation(FRotator::ZeroRotator);
    //ViewportClient->Viewport->SetViewTarget(CameraActor);

    // Create a character controller
    //TObjectPtr<FCharacter> Character = World->SpawnActor<FCharacter>(FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);

    // Set the camera actor as the current player controller's controlled camera
    //TObjectPtr<FPlayerController> PlayerController = (FPlayerController*) GEngine->GetFirstLocalPlayerController(GEngine->GetWorld());
    //PlayerController->SetViewTarget(CameraActor);

    // Create a camera actor
    //TObjectPtr<UEngine> GEngineObjPtr = NewObject<UEngine>();
    World = GEngine->GetWorld(); // GEngineObjPtr->GetWorld(); //
    Camera = World->SpawnActor<ACameraActor>(FVector::ZeroVector, FRotator::ZeroRotator);

    // Set the camera properties
    Camera->SetActorLocation(FVector::ZeroVector);
    Camera->SetActorRotation(FRotator::ZeroRotator);
    Camera->SetActorScale3D(FVector::ZeroVector);

    // Create a player controller
    PlayerController = World->SpawnActor<APlayerController>(FVector::ZeroVector, FRotator::ZeroRotator);

    // Set the player controller's properties
    PlayerController->SetControlRotation(FRotator::ZeroRotator);
    PlayerController->bShowMouseCursor = true;
    PlayerController->bEnableClickEvents = true;
    PlayerController->bEnableMouseOverEvents = true;

    // Create a render target for the viewport

    //ViewportClient = NewObject<UGameViewportClient>();
    ViewportClient = NewObject<FViewportClient>();

    // Set the viewport properties
    ViewportClient->Viewport->SetInitialSize(FIntPoint(1024, 725));

    // Create a render target for the viewport
    //Viewport = NewObject<FViewport>();

    // Set the viewport properties
    //Viewport->SetInitialSize(FIntPoint(1024, 725));
    //Viewport->SetRealtime(true); // real-time rendering
    //Viewport->bIsSlateViewport = true;
}